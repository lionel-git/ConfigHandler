<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ConfigHandler</name>
    </assembly>
    <members>
        <member name="T:ConfigHandler.BaseConfig">
            <summary>
            Base class for definig configs
            </summary>
        </member>
        <member name="P:ConfigHandler.BaseConfig.ConfigFile">
            <summary>
            Path to the config file
            </summary>
        </member>
        <member name="P:ConfigHandler.BaseConfig.GenericConfigFile">
            <summary>
            Optional generic config file
            If set, first load generic config and then populate from this config file
            Else load from ConfigFile
            </summary>
        </member>
        <member name="P:ConfigHandler.BaseConfig.Help">
            <summary>
            If set, display help
            </summary>
        </member>
        <member name="P:ConfigHandler.BaseConfig.Version">
            <summary>
            If set, display versions informations
            </summary>
        </member>
        <member name="M:ConfigHandler.BaseConfig.SetDefaultJsonConfig(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Option to redefine serialisation settings
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:ConfigHandler.BaseConfig.#ctor">
            <summary>
            Instanciate an empty BaseConfig
            </summary>
        </member>
        <member name="M:ConfigHandler.BaseConfig.Load``1(System.String)">
            <summary>
            Load a config from a file
            </summary>
            <typeparam name="T">Type of config to create</typeparam>
            <param name="path">Path to file</param>
            <returns></returns>
        </member>
        <member name="M:ConfigHandler.BaseConfig.Save(System.String)">
            <summary>
            Save config to a file
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:ConfigHandler.BaseConfig.ToString">
            <summary>
            Return config as json string
            </summary>
            <returns></returns>
        </member>
        <member name="M:ConfigHandler.BaseConfig.ShowHelp(System.Boolean)">
            <summary>
            Display help on console, with an optional exit
            </summary>
            <param name="exitProgram"></param>
        </member>
        <member name="M:ConfigHandler.BaseConfig.ShowVersion(System.Boolean)">
            <summary>
            Display version infos
            </summary>
            <param name="exitProgram"></param>
        </member>
        <member name="M:ConfigHandler.BaseConfig.GetConfigFileFromCmdLine``1(System.String[],System.String)">
            <summary>
            Return name of config file to load from cmd line.
            If not found return argument defaultConfigFile
            </summary>
            <param name="args"></param>
            <param name="defaultConfigfile"></param>
            <returns></returns>
        </member>
        <member name="M:ConfigHandler.BaseConfig.UpdateFromCmdLine(System.String[],System.Boolean)">
            <summary>
            Override the current config from cmdline parameters
            Returns false if Help is requested
            </summary>
            <param name="args"></param>
            <param name="showHelp"></param>
            <returns></returns>
        </member>
        <member name="M:ConfigHandler.BaseConfig.UpdateFromSpecificConfig(System.String)">
            <summary>
            Update current config from a specific one
            </summary>
            <param name="updateConfigPath"></param>
        </member>
        <member name="T:ConfigHandler.Helpers">
            <summary>
            Some Helpers
            </summary>
        </member>
        <member name="M:ConfigHandler.Helpers.GetEnumerableAsString(System.Collections.IEnumerable,System.String,System.String,System.Int32)">
            <summary>
            Return the content of a collection as a string with separator
            </summary>
            <param name="list"></param>
            <param name="separator"></param>
            <param name="trailer"></param>
            <param name="countTrailer"></param>
            <returns></returns>
        </member>
        <member name="T:ConfigHandler.OptionAttribute">
            <summary>
            Meta data for describing an option
            </summary>
        </member>
        <member name="P:ConfigHandler.OptionAttribute.HelpMessage">
            <summary>
            Help on the option
            </summary>
        </member>
        <member name="P:ConfigHandler.OptionAttribute.DisplayFormat">
            <summary>
            Try to display value from ToString('DisplayFormat')
            </summary>
        </member>
        <member name="M:ConfigHandler.OptionAttribute.#ctor">
            <summary>
            Create an OptionAttribute
            </summary>
        </member>
        <member name="M:ConfigHandler.OptionAttribute.#ctor(System.String,System.String)">
            <summary>
            Create an OptionAttribute
            </summary>
            <param name="helpMessage"></param>
            <param name="displayFormat"></param>
        </member>
    </members>
</doc>
